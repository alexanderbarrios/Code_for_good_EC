from sage.schemes.elliptic_curves.weierstrass_morphism import *
R.<a,b,d,r,s,x,y>=QQ[]
S.<a,b,d>=QQ[]

# p-adic valuation
def vp(n,p):
	if n==0:
		return 'infinity'
	else:
		return log(1/Qp(p)(n).abs(),p)

# The modified Szpiro ratio of an elliptic curve

def Modified_Szpiro_Ratio(E):
    Emin=(E.change_ring(QQ)).minimal_model()
    return (log(max(abs(Emin.c4()^3),abs(Emin.c6()^2)),10)/log(E.conductor(),10)).numerical_approx()

# The Szpiro ratio of an elliptic curve

def Szpiro_Ratio(E):
    Emin=E.change_ring(QQ).minimal_model()
    return (log(abs(Emin.discriminant()),10)/log(E.conductor(),10)).numerical_approx()

# The quality of an ABC tripe (a,b,c) with a+b=c.
# Note that the code below assumes that gcd(a,b)=1.

def Quality(a,b):
	a=ZZ(a)
	b=ZZ(b)
	if gcd(a,b)>1:
		return 'triple not relatively prime'
	else:
		return (log(max(abs(a),abs(b),abs(a+b)),10)/log(a.radical()*b.radical()*(a+b).radical(),10)).numerical_approx()

# The recursive sequence P_n^T in Theorem 4.8.
# The input n yields the nth term in the recursive sequence.
# The inputs a0 and b0 correspond to a good ABC triple (a0,b0,c0) where a0+b0=c0 and gcd(a0,b0)=1.
# The inputs A, B, D, and theta correspond to A_T, B_T, D_T, and theta_T for a fixed T.
# If (a0,b0,a0+b0) is a good ABC triple with b0/a0 > delta_T, then the output is the P_n^T

def P_n(n,a0,b0,A,B,D,delta):
	if delta >= b0/a0 or gcd(a0,b0)>1 or 1 >= Quality(a0,b0):
		return 'Theorem 4.8 N/A'
	else:
		if n==0:
			return (a0,b0,a0+b0)
	if n==1:
		return (1728*D(a0,b0),B(a0,b0)^2,A(a0,b0)^3)
	else:
		return (1728*D(P(n-1,a0,b0,A,B,D,theta)[0],P(n-1,a0,b0,A,B,D,theta)[1]),B(P(n-1,a0,b0,A,B,D,theta)[0],P(n-1,a0,b0,A,B,D,theta)[1])^2,A(P(n-1,a0,b0,A,B,D,theta)[0],P(n-1,a0,b0,A,B,D,theta)[1])^3)

# The recursive sequence P_n^T in Corollary 4.10 for T=C_{10}
# The input n yields the nth term in the recursive sequence.

def P5_n(n):
	return (5^-3*1728*D5(1,2^(n)),5^-3*B5(1,2^(n))^2,5^-3*A5(1,2^(n)))

# Models for the family of elliptic curves E_T. We use the following naming convention:
#    E_{C_N}  is EN
#    E_{C_2 \times C_{N}}  is E2N

def E2(a,b,d):
	A=a
	B=b^2*d
	return EllipticCurve(S.fraction_field(),[0,2*A,0,A^2-B,0])
def E3(a,b):
    return EllipticCurve(S.fraction_field(),[a,0,a^2*b,0,0])
def E4(a,b):
    return EllipticCurve(S.fraction_field(),[a,-a*b,-a^2*b,0,0])
def E5(a,b):
    return EllipticCurve(S.fraction_field(),[a-b,-a*b,-a^2*b,0,0])
def E6(a,b):
    return EllipticCurve(S.fraction_field(),[a - b, -a*b - b^2, -a^2*b - a*b^2, 0, 0])
def E7(a,b):
    return EllipticCurve(S.fraction_field(),[a^2 + a*b - b^2, a^2*b^2 - a*b^3, a^4*b^2 - a^3*b^3, 0, 0])
def E8(a,b):
    return EllipticCurve(S.fraction_field(),[-a^2 + 4*a*b - 2*b^2, -a^2*b^2 + 3*a*b^3 - 2*b^4, -a^3*b^3 + 3*a^2*b^4 - 2*a*b^5, 0, 0])
def E9(a,b):
    return EllipticCurve(S.fraction_field(),[a^3 + a*b^2 - b^3, a^4*b^2 - 2*a^3*b^3 + 2*a^2*b^4 - a*b^5, a^7*b^2 - 2*a^6*b^3 + 2*a^5*b^4 - a^4*b^5, 0, 0])
def E10(a,b):
    return EllipticCurve(S.fraction_field(),[a^3 - 2*a^2*b - 2*a*b^2 + 2*b^3, -a^3*b^3 + 3*a^2*b^4 - 2*a*b^5, -a^6*b^3 + 6*a^5*b^4 - 12*a^4*b^5 + 9*a^3*b^6 - 2*a^2*b^7, 0, 0])
def E12(a,b):
    return EllipticCurve(S.fraction_field(),[-a^4 + 2*a^3*b + 2*a^2*b^2 - 8*a*b^3 + 6*b^4, a^7*b - 9*a^6*b^2 + 36*a^5*b^3 - 83*a^4*b^4 + 119*a^3*b^5 - 106*a^2*b^6 + 54*a*b^7 - 12*b^8, -a^11*b + 12*a^10*b^2 - 66*a^9*b^3 + 219*a^8*b^4 - 485*a^7*b^5 + 748*a^6*b^6 - 812*a^5*b^7 + 611*a^4*b^8 - 304*a^3*b^9 + 90*a^2*b^10 - 12*a*b^11, 0, 0])
def E22(a,b,d):
	A=a*d
	B=b*d
	return EllipticCurve(S.fraction_field(),[0,A+B,0,A*B,0])
def E24(a,b):
    return EllipticCurve(S.fraction_field(),[a, -a*b - 4*b^2, -a^2*b - 4*a*b^2, 0, 0])
def E26(a,b):
    return EllipticCurve(S.fraction_field(),[-19*a^2+2*a*b+b^2, -10*a^4+22*a^3*b-14*a^2*b^2+2*a*b^3, 90*a^6-198*a^5*b+116*a^4*b^2+4*a^3*b^3-14*a^2*b^4+2*a*b^5, 0, 0])
def E28(a,b):
    return EllipticCurve(S.fraction_field(),[-a^4 - 8*a^3*b - 24*a^2*b^2 + 64*b^4,-4*a^6*b^2 - 56*a^5*b^3 - 320*a^4*b^4 - 960*a^3*b^5 - 1536*a^2*b^6 - 1024*a*b^7,8*a^9*b^3 + 144*a^8*b^4 + 1024*a^7*b^5 + 3328*a^6*b^6 + 2048*a^5*b^7 - 21504*a^4*b^8 - 77824*a^3*b^9 - 114688*a^2*b^10 - 65536*a*b^11,0, 0])

# Models for the family of elliptic curves F_T. We use the following naming convention:
#    F_{C_N}  is FN
#    F_{C_2 \times C_{N}}  is F2N
def F1(a,b):
    return EllipticCurve(S.fraction_field(),[a^3 - a^2*b - 2*a*b^2 - b^3, -a^5*b - 3*a^4*b^2 - 4*a^3*b^3 - 3*a^2*b^4 - a*b^5, -a^8*b - 3*a^7*b^2 - 4*a^6*b^3 - 3*a^5*b^4 - a^4*b^5, 5*a^11*b + 5*a^10*b^2 - 40*a^9*b^3 - 165*a^8*b^4 - 360*a^7*b^5 - 540*a^6*b^6 - 570*a^5*b^7 - 405*a^4*b^8 - 185*a^3*b^9 - 50*a^2*b^10 - 5*a*b^11, a^17*b - 12*a^16*b^2 - 78*a^15*b^3 - 210*a^14*b^4 - 411*a^13*b^5 - 874*a^12*b^6 - 2061*a^11*b^7 - 4172*a^10*b^8 - 6440*a^9*b^9 - 7499*a^8*b^10 - 6656*a^7*b^11 - 4499*a^6*b^12 - 2264*a^5*b^13 - 805*a^4*b^14 - 185*a^3*b^15 - 24*a^2*b^16 - a*b^17])
def F2(a,b):
    return EllipticCurve(S.fraction_field(),[0, -2*a^8 + 48*a^7*b - 40*a^6*b^2 + 48*a^5*b^3 + 52*a^4*b^4 - 48*a^3*b^5 - 40*a^2*b^6 - 48*a*b^7 - 2*b^8, 0, a^16 + 16*a^15*b + 104*a^14*b^2 + 336*a^13*b^3 + 476*a^12*b^4 - 112*a^11*b^5 - 1064*a^10*b^6 - 432*a^9*b^7 + 1222*a^8*b^8 + 432*a^7*b^9 - 1064*a^6*b^10 + 112*a^5*b^11 + 476*a^4*b^12 - 336*a^3*b^13 + 104*a^2*b^14 - 16*a*b^15 + b^16, 0])
def F3(a,b):
    return EllipticCurve(S.fraction_field(),[a^9 - 9*a^8*b + 9*a^7*b^2 + 78*a^6*b^3 - 36*a^5*b^4 - 315*a^4*b^5 - 321*a^3*b^6 - 117*a^2*b^7 - 18*a*b^8 - b^9, 0, -a^26*b + 14*a^25*b^2 - 36*a^24*b^3 - 241*a^23*b^4 + 749*a^22*b^5 + 3150*a^21*b^6 - 4648*a^20*b^7 - 31519*a^19*b^8 - 20331*a^18*b^9 + 145028*a^17*b^10 + 408311*a^16*b^11 + 286029*a^15*b^12 - 885298*a^14*b^13 - 3161857*a^13*b^14 - 5549319*a^12*b^15 - 6667174*a^11*b^16 - 5946658*a^10*b^17 - 4043277*a^9*b^18 - 2102770*a^8*b^19 - 827554*a^7*b^20 - 241443*a^6*b^21 - 50794*a^5*b^22 - 7423*a^4*b^23 - 711*a^3*b^24 - 40*a^2*b^25 - a*b^26, 0, 0])
def F4(a,b):
	return EllipticCurve(S.fraction_field(),[a^8 + 4*a^7*b + 4*a^6*b^2 - 4*a^5*b^3 - 10*a^4*b^4 - 4*a^3*b^5 + 4*a^2*b^6 + 4*a*b^7 + b^8, a^15*b + a^14*b^2 - 2*a^13*b^3 + a^12*b^4 + 4*a^11*b^5 - 5*a^10*b^6 - 3*a^9*b^7 + 6*a^8*b^8 - 3*a^7*b^9 - 5*a^6*b^10 + 4*a^5*b^11 + a^4*b^12 - 2*a^3*b^13 + a^2*b^14 + a*b^15, a^23*b + 5*a^22*b^2 + 6*a^21*b^3 - 7*a^20*b^4 - 14*a^19*b^5 + 9*a^18*b^6 + 9*a^17*b^7 - 36*a^16*b^8 - 18*a^15*b^9 + 50*a^14*b^10 + 16*a^13*b^11 - 42*a^12*b^12 + 16*a^11*b^13 + 50*a^10*b^14 - 18*a^9*b^15 - 36*a^8*b^16 + 9*a^7*b^17 + 9*a^6*b^18 - 14*a^5*b^19 - 7*a^4*b^20 + 6*a^3*b^21 + 5*a^2*b^22 + a*b^23, 0, 0])
def F5(a,b):
	return EllipticCurve(S.fraction_field(),[-32768*b^20 + 1, -32768*b^20, -32768*b^20, 0, 0])
def F6(a,b):
	return EllipticCurve(S.fraction_field(),[2*a^4 - 8*a^3*b + 20*a^2*b^2 - 8*a*b^3 + 2*b^4, -8*a^7*b + 16*a^6*b^2 - 24*a^5*b^3 + 32*a^4*b^4 - 24*a^3*b^5 + 16*a^2*b^6 - 8*a*b^7, -8*a^11*b + 80*a^10*b^2 - 296*a^9*b^3 + 576*a^8*b^4 - 848*a^7*b^5 + 992*a^6*b^6 - 848*a^5*b^7 + 576*a^4*b^8 - 296*a^3*b^9 + 80*a^2*b^10 - 8*a*b^11, 0, 0])
def F7(a,b):
    return EllipticCurve(S.fraction_field(),[a^2 - a*b - b^2, -a^3*b - 2*a^2*b^2 - a*b^3, -a^5*b - 2*a^4*b^2 - a^3*b^3, 0, 0])
def F8(a,b):
	return EllipticCurve(S.fraction_field(),[-a^4 + 2*a^2*b^2 + b^4, -a^4*b^4 + a^2*b^6, -a^6*b^6 + a^2*b^10, 0, 0])
def F9(a,b):
    return EllipticCurve(S.fraction_field(),[a^3 - a^2*b - 2*a*b^2 - b^3, -a^5*b - 3*a^4*b^2 - 4*a^3*b^3 - 3*a^2*b^4 - a*b^5, -a^8*b - 3*a^7*b^2 - 4*a^6*b^3 - 3*a^5*b^4 - a^4*b^5, 0, 0])
def F10(a,b):
    return EllipticCurve(S.fraction_field(),[-a^3 + 4*a*b^2 + 2*b^3, -a^5*b - 5*a^4*b^2 - 9*a^3*b^3 - 7*a^2*b^4 - 2*a*b^5, a^8*b + 6*a^7*b^2 + 13*a^6*b^3 + 11*a^5*b^4 - 5*a^3*b^6 - 2*a^2*b^7, 0, 0])
def F12(a,b):
	return EllipticCurve(S.fraction_field(),[a^4 - 2*a^3*b + 2*a^2*b^2 - 2*a*b^3 - b^4, -a^6*b^2 + 2*a^5*b^3 - 3*a^4*b^4 + 3*a^3*b^5 - 2*a^2*b^6 + a*b^7, a^7*b^5 - a^6*b^6 + a^5*b^7 - a^3*b^9 + a^2*b^10 - a*b^11, 0, 0])
def F22(a,b):
	return EllipticCurve(S.fraction_field(),[0, a^8 - 24*a^7*b + 20*a^6*b^2 - 24*a^5*b^3 - 26*a^4*b^4 + 24*a^3*b^5 + 20*a^2*b^6 + 24*a*b^7 + b^8, 0, -16*a^15*b + 128*a^14*b^2 - 336*a^13*b^3 + 256*a^12*b^4 + 112*a^11*b^5 - 128*a^10*b^6 + 432*a^9*b^7 - 512*a^8*b^8 - 432*a^7*b^9 - 128*a^6*b^10 - 112*a^5*b^11 + 256*a^4*b^12 + 336*a^3*b^13 + 128*a^2*b^14 + 16*a*b^15, 0])
def F24(a,b):
	return EllipticCurve(S.fraction_field(),[a^4 - 4*a^3*b + 2*a^2*b^2 + 4*a*b^3 + b^4, -a^7*b - a^5*b^3 + a^3*b^5 + a*b^7, -a^11*b + 4*a^10*b^2 - 3*a^9*b^3 - 2*a^7*b^5 - 8*a^6*b^6 + 2*a^5*b^7 + 3*a^3*b^9 + 4*a^2*b^10 + a*b^11, 0, 0])
def F26(a,b):
	return EllipticCurve(S.fraction_field(),[-16*a^4 + 32*a^3*b + 32*a^2*b^2 + 32*a*b^3 - 16*b^4, -512*a^6*b^2 + 1024*a^5*b^3 - 1024*a^4*b^4 + 1024*a^3*b^5 - 512*a^2*b^6, 4096*a^10*b^2 - 16384*a^9*b^3 + 16384*a^7*b^5 - 8192*a^6*b^6 + 16384*a^5*b^7 - 16384*a^3*b^9 + 4096*a^2*b^10, 0, 0])
def F28(a,b):
	return EllipticCurve(S.fraction_field(),[a^4 + 4*a^3*b - b^4, a^7*b + a^6*b^2 - a^3*b^5 - a^2*b^6, a^11*b + 4*a^10*b^2 + 4*a^9*b^3 - 2*a^7*b^5 - 4*a^6*b^6 - 4*a^5*b^7 + a^3*b^9, 0, 0])

# The quantities \fraktur{A_T}, \fraktur{B}_T, and \fraktur{D}_T appearing in the proof of Proposition 3.1
# We use the following naming convention:
# if T=C_N (resp. T=C_2 x C_{2N} ), then we write \fraktur{A_T}, \fraktur{B_T}, \fraktur{D_T} as fAN, fBN, and fDN (resp. fA2N, fB2N, and fD2N), respectively.

fA2=-a^8 + 24*a^7*b - 20*a^6*b^2 + 24*a^5*b^3 + 26*a^4*b^4 - 24*a^3*b^5 - 20*a^2*b^6 - 24*a*b^7 - b^8
fB2=8*(a^2 - 2*a*b - b^2)^2*(a^2 + b^2)
fD2=-(a + b)*(a - b)*a*b
fA3=(a^3 - 3*a^2*b - 6*a*b^2 - b^3)^3
fB3=-a*b*(a + b)*(a^2 + a*b + b^2)^3
fA4=(a + b)^6 * (a - b)^2
fB4=-b * a * (a^2 - a*b + b^2)^3
fA5=1
fB5=2^15*b^20
fA6=(a^2-4*a*b+b^2)^2
fB6=-(a^2+b^2)^2
fA7=a
fB7=a+b
fA8=a^2 + b^2
fB8=b^2
fA9=a
fB9=a+b
fA10=a
fB10=a+b
fA12=a+b
fB12=a
fA22=-16*(a^2 + b^2)^2*(a + b)*(a - b)*a*b
fB22=(a^2 - 2*a*b - b^2)^4
fA24=(a^2 - 2*a*b - b^2)^2
fB24=(a + b)*(a - b)*a*b
fA26=a^2+b^2
fB26=a^2+8*a*b+b^2
fA28=a-b
fB28=-a/2

# Models from Nitaj's paper
# We use the following naming convention: E_N(s,t) in Nitaj's paper is denoted by EN(a,b)

def E37(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+4*a^3*b+6*a^2*b^2+8*a*b^3+4*b^4),-a^2*b^2*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2),-a^3*b^3*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2)*(a^2+4*a*b+2*b^2),0,0])
def E38(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+4*a^3*b+6*a^2*b^2+8*a*b^3+4*b^4),-a^2*b^2*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2),-a^3*b^3*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2)*(a^2+4*a*b+2*b^2),-5*a^4*b^4*(a+2*b)^4*(a+b)^4,-a^4*b^4*(a+b)^4*(a+2*b)^4*(a^8+8*a^7*b+24*a^6*b^2+37*a^5*b^3+47*a^4*b^4+74*a^3*b^5+96*a^2*b^6+64*a*b^7+16*b^8)])
def E39(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+4*a^3*b+6*a^2*b^2+8*a*b^3+4*b^4),-a^2*b^2*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2),-a^3*b^3*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2)*(a^2+4*a*b+2*b^2),5*b^4*(a+b)^4*(a^2-2*b^2)*(a^2+2*a*b+2*b^2)^2*(a^2+4*a*b+2*b^2),b^4*(a+b)^4*(a^2-2*b^2)*(a^2+2*a*b+2*b^2)^2*(a^2+4*a*b+2*b^2)*(a^8+8*a^7*b+24*a^6*b^2+37*a^5*b^3+19*a^4*b^4-38*a^3*b^5-72*a^2*b^6-48*a*b^7-12*b^8)])
def E40(a,b):
    return EllipticCurve(S.fraction_field(),[-1/2*(a^4+4*a^3*b+6*a^2*b^2+8*a*b^3+4*b^4),-1/4*a^2*b^2*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2),-1/8*a^3*b^3*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2)*(a^2+4*a*b+2*b^2),-5/256*a^4*(a+2*b)^4*(a^2-2*b^2)*(a^2+2*a*b+2*b^2)^2*(a^2+4*a*b+2*b^2),1/4096*a^4*(a+2*b)^4*(a^2-2*b^2)*(a^2+2*a*b+2*b^2)^2*(a^2+4*a*b+2*b^2)*(3*a^8+24*a^7*b+72*a^6*b^2+76*a^5*b^3-76*a^4*b^4-296*a^3*b^5-384*a^2*b^6-256*a*b^7-64*b^8)])
def E41(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+4*a^3*b+6*a^2*b^2+8*a*b^3+4*b^4),-a^2*b^2*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2),-a^3*b^3*(a+b)*(a+2*b)*(a^2+2*a*b+2*b^2)*(a^2+4*a*b+2*b^2),-5*a^2*b^2*(a+b)^2*(a+2*b)^2*(a^8+8*a^7*b+33*a^6*b^2+86*a^5*b^3+149*a^4*b^4+172*a^3*b^5+132*a^2*b^6+64*a*b^7+16*b^8),-a^2*b^2*(a+b)^2*(a+2*b)^2*(a^16+16*a^15*b+135*a^14*b^2+775*a^13*b^3+3274*a^12*b^4+10531*a^11*b^5+26353*a^10*b^6+52125*a^9*b^7+82339*a^8*b^8+104250*a^7*b^9+105412*a^6*b^10+84248*a^5*b^11+52384*a^4*b^12+24800*a^3*b^13+8640*a^2*b^14+2048*a*b^15+256*b^16)])
def E42(a,b):
    return EllipticCurve(S.fraction_field(),[0,1/4*(a^8+8*a^7*b+24*a^6*b^2+44*a^5*b^3+68*a^4*b^4+88*a^3*b^5+96*a^2*b^6+64*a*b^7+16*b^8),0,1/2*a^2*b^2*(a+2*b)*(a+b)*(10*a^10+111*a^9*b+420*a^8*b^2+432*a^7*b^3-1106*a^6*b^4-3254*a^5*b^5-2212*a^4*b^6+1728*a^3*b^7+3360*a^2*b^8+1776*a*b^9+320*b^10),1/4*a^2*b^2*(a+2*b)^2*(a+b)^2*(a^8+8*a^7*b+8*a^6*b^2-60*a^5*b^3-164*a^4*b^4-120*a^3*b^5+32*a^2*b^6+64*a*b^7+16*b^8)*(4*a^8+32*a^7*b+68*a^6*b^2-36*a^5*b^3-223*a^4*b^4-72*a^3*b^5+272*a^2*b^6+256*a*b^7+64*b^8)])
def E43(a,b):
    return EllipticCurve(S.fraction_field(),[0,1/4*(a^8+8*a^7*b+24*a^6*b^2+44*a^5*b^3+68*a^4*b^4+88*a^3*b^5+96*a^2*b^6+64*a*b^7+16*b^8),0,-1/2*a*b*(a+2*b)*(a+b)*(10*a^12+210*a^11*b+1869*a^10*b^2+9620*a^9*b^3+32328*a^8*b^4+75346*a^7*b^5+125494*a^6*b^6+150692*a^5*b^7+129312*a^4*b^8+76960*a^3*b^9+29904*a^2*b^10+6720*a*b^11+640*b^12),-1/4*a*b*(a+2*b)*(a+b)*(a^8+24*a^7*b+152*a^6*b^2+484*a^5*b^3+892*a^4*b^4+968*a^3*b^5+608*a^2*b^6+192*a*b^7+16*b^8)*(4*a^12+76*a^11*b+652*a^10*b^2+3304*a^9*b^3+11012*a^8*b^4+25547*a^7*b^5+42485*a^6*b^6+51094*a^5*b^7+44048*a^4*b^8+26432*a^3*b^9+10432*a^2*b^10+2432*a*b^11+256*b^12)])
def E44(a,b):
    return EllipticCurve(S.fraction_field(),[0,1/4*(a^8+8*a^7*b+24*a^6*b^2+44*a^5*b^3+68*a^4*b^4+88*a^3*b^5+96*a^2*b^6+64*a*b^7+16*b^8),0,1/2*a*b*(a+2*b)*(a+b)*(10*a^12+30*a^11*b-109*a^10*b^2-820*a^9*b^3-2328*a^8*b^4-4306*a^7*b^5-6454*a^6*b^6-8612*a^5*b^7-9312*a^4*b^8-6560*a^3*b^9-1744*a^2*b^10+960*a*b^11+640*b^12),1/4*a*b*(a+2*b)*(a+b)*(a^8-8*a^7*b-72*a^6*b^2-220*a^5*b^3-388*a^4*b^4-440*a^3*b^5-288*a^2*b^6-64*a*b^7+16*b^8)*(4*a^12+20*a^11*b+36*a^10*b^2+64*a^9*b^3+324*a^8*b^4+1125*a^7*b^5+2123*a^6*b^6+2250*a^5*b^7+1296*a^4*b^8+512*a^3*b^9+576*a^2*b^10+640*a*b^11+256*b^12)])
def E45(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^3-a^2*b-b^3),-a^2*b*(a-b)*(a^2-a*b+b^2),-a^2*b^4*(a-b)*(a^2-a*b+b^2),0,0])
def E46(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^3-a^2*b-b^3),-a^2*b*(a-b)*(a^2-a*b+b^2),-a^2*b^4*(a-b)*(a^2-a*b+b^2),-5*a^3*b^3*(a-b)^3*(a^3-3*a^2*b+b^3),-a^3*b^3*(a-b)^3*(a^9-9*a^8*b+27*a^7*b^2-22*a^6*b^3-19*a^5*b^4+33*a^4*b^5-9*a^3*b^6-4*a^2*b^7+b^9)])
def E47(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^3-a^2*b-b^3),-a^2*b*(a-b)*(a^2-a*b+b^2),-a^2*b^4*(a-b)*(a^2-a*b+b^2),-5*a*b*(a-b)*(a^9-8*a^7*b^2+25*a^6*b^3-47*a^5*b^4+61*a^4*b^5-53*a^3*b^6+28*a^2*b^7-9*a*b^8+b^9),-a*b*(a-b)*(a^15+8*a^14*b-55*a^13*b^2+175*a^12*b^3-466*a^11*b^4+1173*a^10*b^5-2518*a^9*b^6+4189*a^8*b^7-5236*a^7*b^8+4938*a^6*b^9-3518*a^5*b^10+1861*a^4*b^11-698*a^3*b^12+167*a^2*b^13-23*a*b^14+b^15)])
def E52(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+2*a^2*b^2+8*a*b^3-27*b^4),-4*b^2*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),32*b^5*(a-3*b)*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),0,0])
def E53(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+2*a^2*b^2+8*a*b^3-27*b^4),-4*b^2*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),32*b^5*(a-3*b)*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),-320*b^6*(a-b)^6*(a^2+3*b^2)^2,-64*b^6*(a-b)^6*(a^2+3*b^2)^2*(a^8-12*a^6*b^2+48*a^5*b^3-162*a^4*b^4+320*a^3*b^5-380*a^2*b^6+144*a*b^7+297*b^8)])
def E54(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+2*a^2*b^2+8*a*b^3-27*b^4),-4*b^2*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),32*b^5*(a-3*b)*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),-80*b^4*(a+b)^2*(a-b)^4*(a^2-2*a*b+5*b^2)*(a^4-6*a^2*b^2+24*a*b^3-3*b^4),-16*b^4*(a+b)^2*(a-b)^4*(a^2-2*a*b+5*b^2)*(a^12-18*a^10*b^2+72*a^9*b^3+131*a^8*b^4-1152*a^7*b^5+2676*a^6*b^6-1328*a^5*b^7-5833*a^4*b^8+11456*a^3*b^9-10626*a^2*b^10+9384*a*b^11-667*b^12)])
def E55(a,b):
    return EllipticCurve(S.fraction_field(),[-(a^4+2*a^2*b^2+8*a*b^3-27*b^4),-4*b^2*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),32*b^5*(a-3*b)*(a^2-b^2)*(a^2+3*b^2)*(a^2-2*a*b+5*b^2),40*b^3*(a-b)^3*(a^2+3*b^2)*(a^8-12*a^6*b^2-24*a^5*b^3+54*a^4*b^4+48*a^3*b^5+180*a^2*b^6-24*a*b^7+33*b^8),8*b^3*(a-b)^3*(a^2+3*b^2)*(a^16-24*a^14*b^2-88*a^13*b^3+372*a^12*b^4+752*a^11*b^5-1176*a^10*b^6+504*a^9*b^7-14418*a^8*b^8+20896*a^7*b^9-33480*a^6*b^10+65304*a^5*b^11-62396*a^4*b^12+39024*a^3*b^13+32760*a^2*b^14+4680*a*b^15+12825*b^16)])

# The quantities rho_m and tau_1 appearing in the proof of Lemma 3.2
rho1 , tau1 = a+b, a
rho2 , tau2 = b-2*a,b
rho3 , tau3 = 2*a, -a - b

# The quantities A_T. We use the following naming convention:
#If T=C_N (resp. C_2 x C_{2N}), then we write AN (resp. A2N)

A1(a,b)=(a^3 - 3*a^2*b - 6*a*b^2 - b^3) * (a^9 - 225*a^8*b - 855*a^7*b^2 - 1866*a^6*b^3 - 2844*a^5*b^4 - 3123*a^4*b^5 - 2265*a^3*b^6 - 981*a^2*b^7 - 234*a*b^8 - b^9)
A2(a,b)=a^16 - 240*a^15*b + 2152*a^14*b^2 - 5040*a^13*b^3 + 4572*a^12*b^4 + 1680*a^11*b^5 - 3112*a^10*b^6 + 6480*a^9*b^7 - 6970*a^8*b^8 - 6480*a^7*b^9 - 3112*a^6*b^10 - 1680*a^5*b^11 + 4572*a^4*b^12 + 5040*a^3*b^13 + 2152*a^2*b^14 + 240*a*b^15 + b^16
A3(a,b)=(a^3 - 3*a^2*b - 6*a*b^2 - b^3) * (a^3 + 3*a^2*b - b^3) * (a^6 + 12*a^5*b + 69*a^4*b^2 + 88*a^3*b^3 + 24*a^2*b^4 - 6*a*b^5 + b^6)
A4(a,b)=(a^4 - 2*a^3*b - 2*a*b^3 + b^4) * (a^12 - 6*a^11*b + 12*a^10*b^2 - 14*a^9*b^3 + 243*a^8*b^4 - 468*a^7*b^5 + 456*a^6*b^6 - 468*a^5*b^7 + 243*a^4*b^8 - 14*a^3*b^9 + 12*a^2*b^10 - 6*a*b^11 + b^12)
A5(a,b)=1152921504606846976*b^80 - 422212465065984*b^60 + 15032385536*b^40 + 393216*b^20 + 1
A6(a,b)=(a^4 + 4*a^3*b - 6*a^2*b^2 + 4*a*b^3 + b^4) * (a^12 - 12*a^11*b + 78*a^10*b^2 - 188*a^9*b^3 + 111*a^8*b^4 + 264*a^7*b^5 - 444*a^6*b^6 + 264*a^5*b^7 + 111*a^4*b^8 - 188*a^3*b^9 + 78*a^2*b^10 - 12*a*b^11 + b^12)
A7(a,b)=(a^2 + a*b + b^2) * (a^6 + 11*a^5*b + 30*a^4*b^2 + 15*a^3*b^3 - 10*a^2*b^4 - 5*a*b^5 + b^6)
A8(a,b)=a^16 - 8*a^14*b^2 + 12*a^12*b^4 + 8*a^10*b^6 - 10*a^8*b^8 + 8*a^6*b^10 + 12*a^4*b^12 - 8*a^2*b^14 + b^16
A9(a,b)=(a^3 + 3*a^2*b - b^3) * (a^9 + 9*a^8*b + 27*a^7*b^2 + 48*a^6*b^3 + 54*a^5*b^4 + 45*a^4*b^5 + 27*a^3*b^6 + 9*a^2*b^7 - b^9)
A10(a,b)=(1/16) * (a^12 + 16*a^11*b + 104*a^10*b^2 + 360*a^9*b^3 + 720*a^8*b^4 + 816*a^7*b^5 + 416*a^6*b^6 - 96*a^5*b^7 - 240*a^4*b^8 - 80*a^3*b^9 + 64*a^2*b^10 + 64*a*b^11 + 16*b^12)
A12(a,b)=(a^4 - 2*a^3*b - 2*a*b^3 + b^4) * (a^12 - 6*a^11*b + 12*a^10*b^2 - 14*a^9*b^3 + 3*a^8*b^4 + 12*a^7*b^5 - 24*a^6*b^6 + 12*a^5*b^7 + 3*a^4*b^8 - 14*a^3*b^9 + 12*a^2*b^10 - 6*a*b^11 + b^12)
A22(a,b)=a^16 + 232*a^14*b^2 + 732*a^12*b^4 - 1192*a^10*b^6 + 710*a^8*b^8 - 1192*a^6*b^10 + 732*a^4*b^12 + 232*a^2*b^14 + b^16
A24(a,b)=(a^8 - 4*a^7*b + 4*a^6*b^2 + 28*a^5*b^3 + 6*a^4*b^4 - 28*a^3*b^5 + 4*a^2*b^6 + 4*a*b^7 + b^8) * (a^8 + 4*a^7*b + 4*a^6*b^2 - 28*a^5*b^3 + 6*a^4*b^4 + 28*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8)
A26(a,b)=(a^4 - 2*a^3*b + 6*a^2*b^2 - 2*a*b^3 + b^4) * (a^12 - 6*a^11*b + 6*a^10*b^2 + 10*a^9*b^3 + 15*a^8*b^4 - 36*a^7*b^5 + 84*a^6*b^6 - 36*a^5*b^7 + 15*a^4*b^8 + 10*a^3*b^9 + 6*a^2*b^10 - 6*a*b^11 + b^12)
A28(a,b)=a^16 - 8*a^14*b^2 + 12*a^12*b^4 + 8*a^10*b^6 + 230*a^8*b^8 + 8*a^6*b^10 + 12*a^4*b^12 - 8*a^2*b^14 + b^16

# The quantities B_T. We use the following naming convention:
#If T=C_N (resp. C_2 x C_{2N}), then we write BN (resp. B2N)

B1(a,b)=(-1) * (a^18 + 522*a^17*b - 8433*a^16*b^2 - 56382*a^15*b^3 - 174843*a^14*b^4 - 433494*a^13*b^5 - 1084008*a^12*b^6 - 2541474*a^11*b^7 - 4836168*a^10*b^8 - 7036328*a^9*b^9 - 7787457*a^8*b^10 - 6599304*a^7*b^11 - 4265121*a^6*b^12 - 2050470*a^5*b^13 - 692973*a^4*b^14 - 148722*a^3*b^15 - 17154*a^2*b^16 - 504*a*b^17 + b^18)
B2(a,b)=(-1) * (a^8 - 24*a^7*b + 20*a^6*b^2 - 24*a^5*b^3 - 26*a^4*b^4 + 24*a^3*b^5 + 20*a^2*b^6 + 24*a*b^7 + b^8) * (a^16 + 528*a^15*b - 3992*a^14*b^2 + 11088*a^13*b^3 - 7716*a^12*b^4 - 3696*a^11*b^5 + 3032*a^10*b^6 - 14256*a^9*b^7 + 17606*a^8*b^8 + 14256*a^7*b^9 + 3032*a^6*b^10 + 3696*a^5*b^11 - 7716*a^4*b^12 - 11088*a^3*b^13 - 3992*a^2*b^14 - 528*a*b^15 + b^16)
B3(a,b)=(-1) * (a^6 + 12*a^5*b + 15*a^4*b^2 - 20*a^3*b^3 - 30*a^2*b^4 - 6*a*b^5 + b^6) * (a^12 + 6*a^11*b + 48*a^10*b^2 + 428*a^9*b^3 + 1899*a^8*b^4 + 3636*a^7*b^5 + 3030*a^6*b^6 + 720*a^5*b^7 - 288*a^4*b^8 - 58*a^3*b^9 + 48*a^2*b^10 + 6*a*b^11 + b^12)
B4(a,b)=(-1) * (a^8 - 4*a^7*b + 28*a^6*b^2 - 52*a^5*b^3 + 46*a^4*b^4 - 52*a^3*b^5 + 28*a^2*b^6 - 4*a*b^7 + b^8) * (a^16 - 8*a^15*b + 104*a^13*b^3 - 220*a^12*b^4 + 216*a^11*b^5 - 728*a^10*b^6 + 1144*a^9*b^7 - 1026*a^8*b^8 + 1144*a^7*b^9 - 728*a^6*b^10 + 216*a^5*b^11 - 220*a^4*b^12 + 104*a^3*b^13 - 8*a*b^15 + b^16)
B5(a,b)=(-1) * (8*b^4 - 4*b^2 + 1) * (8*b^4 + 4*b^2 + 1) * (4096*b^16 - 2048*b^14 + 512*b^12 - 64*b^8 + 8*b^4 - 4*b^2 + 1) * (4096*b^16 + 2048*b^14 + 512*b^12 - 64*b^8 + 8*b^4 + 4*b^2 + 1) * (1152921504606846976*b^80 - 633318697598976*b^60 + 79456894976*b^40 + 589824*b^20 + 1)
B6(a,b)=(-1) * (a^8 - 4*a^7*b + 4*a^6*b^2 + 20*a^5*b^3 - 26*a^4*b^4 + 20*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8) * (a^16 - 8*a^15*b + 24*a^14*b^2 - 568*a^13*b^3 + 2684*a^12*b^4 - 4776*a^11*b^5 + 2344*a^10*b^6 + 4840*a^9*b^7 - 8826*a^8*b^8 + 4840*a^7*b^9 + 2344*a^6*b^10 - 4776*a^5*b^11 + 2684*a^4*b^12 - 568*a^3*b^13 + 24*a^2*b^14 - 8*a*b^15 + b^16)
B7(a,b)=(-1) * (a^12 + 18*a^11*b + 117*a^10*b^2 + 354*a^9*b^3 + 570*a^8*b^4 + 486*a^7*b^5 + 273*a^6*b^6 + 222*a^5*b^7 + 174*a^4*b^8 + 46*a^3*b^9 - 15*a^2*b^10 - 6*a*b^11 + b^12)
B8(a,b)=(-1) * (a^8 - 4*a^6*b^2 - 2*a^4*b^4 - 4*a^2*b^6 + b^8) * (a^16 - 8*a^14*b^2 + 12*a^12*b^4 + 8*a^10*b^6 - 34*a^8*b^8 + 8*a^6*b^10 + 12*a^4*b^12 - 8*a^2*b^14 + b^16)
B9(a,b)=(-1) * (a^18 + 18*a^17*b + 135*a^16*b^2 + 570*a^15*b^3 + 1557*a^14*b^4 + 2970*a^13*b^5 + 4128*a^12*b^6 + 4230*a^11*b^7 + 3240*a^10*b^8 + 2032*a^9*b^9 + 1359*a^8*b^10 + 1080*a^7*b^11 + 735*a^6*b^12 + 306*a^5*b^13 + 27*a^4*b^14 - 42*a^3*b^15 - 18*a^2*b^16 + b^18)
B10(a,b)=(-1/64) * (a^2 + 2*a*b + 2*b^2) * (a^4 + 6*a^3*b + 6*a^2*b^2 - 4*a*b^3 - 4*b^4) * (a^4 + 6*a^3*b + 12*a^2*b^2 + 8*a*b^3 + 2*b^4) * (a^8 + 10*a^7*b + 32*a^6*b^2 + 40*a^5*b^3 + 14*a^4*b^4 + 8*a^2*b^6 - 4*b^8)
B12(a,b)=(-1) * (a^8 - 4*a^7*b + 4*a^6*b^2 - 4*a^5*b^3 - 2*a^4*b^4 - 4*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8) * (a^16 - 8*a^15*b + 24*a^14*b^2 - 40*a^13*b^3 + 44*a^12*b^4 - 24*a^11*b^5 - 32*a^10*b^6 + 88*a^9*b^7 - 114*a^8*b^8 + 88*a^7*b^9 - 32*a^6*b^10 - 24*a^5*b^11 + 44*a^4*b^12 - 40*a^3*b^13 + 24*a^2*b^14 - 8*a*b^15 + b^16)
B22(a,b)=(-1) * (a^8 + 20*a^6*b^2 - 26*a^4*b^4 + 20*a^2*b^6 + b^8) * (a^8 - 24*a^7*b + 20*a^6*b^2 - 24*a^5*b^3 - 26*a^4*b^4 + 24*a^3*b^5 + 20*a^2*b^6 + 24*a*b^7 + b^8) * (a^8 + 24*a^7*b + 20*a^6*b^2 + 24*a^5*b^3 - 26*a^4*b^4 - 24*a^3*b^5 + 20*a^2*b^6 - 24*a*b^7 + b^8)
B24(a,b)=(-1) * (a^4 - 4*a^3*b - 6*a^2*b^2 + 4*a*b^3 + b^4) * (a^4 + 4*a^3*b - 6*a^2*b^2 - 4*a*b^3 + b^4) * (a^8 - 4*a^6*b^2 + 22*a^4*b^4 - 4*a^2*b^6 + b^8) * (a^8 + 20*a^6*b^2 - 26*a^4*b^4 + 20*a^2*b^6 + b^8)
B26(a,b)=(-1) * (a^8 - 4*a^7*b + 4*a^6*b^2 - 28*a^5*b^3 + 22*a^4*b^4 - 28*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8) * (a^8 - 4*a^7*b + 4*a^6*b^2 - 4*a^5*b^3 - 2*a^4*b^4 - 4*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8) * (a^8 - 4*a^7*b + 4*a^6*b^2 + 20*a^5*b^3 - 26*a^4*b^4 + 20*a^3*b^5 + 4*a^2*b^6 - 4*a*b^7 + b^8)
B28(a,b)=(-1) * (a^8 - 4*a^6*b^2 - 26*a^4*b^4 - 4*a^2*b^6 + b^8) * (a^8 - 4*a^6*b^2 - 2*a^4*b^4 - 4*a^2*b^6 + b^8) * (a^8 - 4*a^6*b^2 + 22*a^4*b^4 - 4*a^2*b^6 + b^8)


# The quantities D_T. We use the following naming convention:
#If T=C_N (resp. C_2 x C_{2N}), then we write DN (resp. D2N)

D1(a,b)=(-1) * b * a * (a + b) * (a^2 + a*b + b^2)^3 * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)^9
D2(a,b)=(-1) * b * a * (a - b) * (a + b) * (a^2 + b^2)^2 * (a^2 - 2*a*b - b^2)^4 * (a^2 + 2*a*b - b^2)^16
D3(a,b)=(-1) * b^3 * a^3 * (a + b)^3 * (a^2 + a*b + b^2)^9 * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)^3
D4(a,b)=(a - b)^2 * b^4 * a^4 * (a + b)^6 * (a^2 + b^2) * (a^2 - 4*a*b + b^2)^3 * (a^2 - a*b + b^2)^12
D5(a,b)=(2^75) * b^100 * (64*b^8 - 8*b^4 - 1) * (4096*b^16 - 1024*b^12 + 256*b^8 - 24*b^4 + 1) * (4096*b^16 + 1536*b^12 + 256*b^8 + 16*b^4 + 1)
D6(a,b)=(a + b)^2 * b^3 * a^3 * (a - b)^6 * (a^2 - a*b + b^2) * (a^2 - 4*a*b + b^2)^4 * (a^2 + b^2)^12
D7(a,b)=(-1) * b^7 * a^7 * (a + b)^7 * (a^3 + 8*a^2*b + 5*a*b^2 - b^3)
D8(a,b)=(a - b)^4 * (a + b)^4 * b^16 * a^16 * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2) * (a^2 + b^2)^2
D9(a,b)=(-1) * b^9 * a^9 * (a + b)^9 * (a^2 + a*b + b^2)^3 * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)
D10(a,b)=(1/4096) * a^5 * (a + 2*b)^5 * b^10 * (a + b)^10 * (a^2 + 6*a*b + 4*b^2) * (a^2 + a*b - b^2)^2
D12(a,b)=(a + b)^2 * (a - b)^6 * b^12 * a^12 * (a^2 - 4*a*b + b^2) * (a^2 + b^2)^3 * (a^2 - a*b + b^2)^4
D22(a,b)=b^2 * a^2 * (a - b)^2 * (a + b)^2 * (a^2 + b^2)^4 * (a^2 - 2*a*b - b^2)^8 * (a^2 + 2*a*b - b^2)^8
D24(a,b)=b^4 * a^4 * (a - b)^4 * (a + b)^4 * (a^2 - 2*a*b - b^2)^4 * (a^2 + 2*a*b - b^2)^4 * (a^2 + b^2)^8
D26(a,b)=(a + b)^4 * b^6 * a^6 * (a - b)^12 * (a^2 - 4*a*b + b^2)^2 * (a^2 - a*b + b^2)^2 * (a^2 + b^2)^6
D28(a,b)=b^8 * a^8 * (a - b)^8 * (a + b)^8 * (a^2 - 2*a*b - b^2)^2 * (a^2 + 2*a*b - b^2)^2 * (a^2 + b^2)^4

# The quantities \hat{D}_T. We use the following naming convention:
#If T=C_N (resp. C_2 x C_{2N}), then we write DhN (resp. Dh2N)

Dh1(a,b)=(-1)* (a + b) * (a^2 + a*b + b^2) * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)
Dh2(a,b)=(-1)* (a - b) * (a + b) * (a^2 + b^2) * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2)
Dh3(a,b)=(-1)* (a + b) * (a^2 + a*b + b^2) * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)
Dh4(a,b)=(-1)* (a + b) * (a - b) * (a^2 + b^2) * (a^2 - 4*a*b + b^2) * (a^2 - a*b + b^2)
Dh5(a,b)=(2/5) * (64*b^8 - 8*b^4 - 1) * (4096*b^16 - 1024*b^12 + 256*b^8 - 24*b^4 + 1) * (4096*b^16 + 1536*b^12 + 256*b^8 + 16*b^4 + 1)
Dh6(a,b)=(-1)* (a + b) * (a - b) * (a^2 + b^2) * (a^2 - 4*a*b + b^2) * (a^2 - a*b + b^2)
Dh7(a,b)=(-1) * (a + b) * (a^3 + 8*a^2*b + 5*a*b^2 - b^3)
Dh8(a,b)=(-1)* (a - b) * (a + b) * (a^2 + b^2) * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2)
Dh9(a,b)=(-1)* (a + b) * (a^2 + a*b + b^2) * (a^3 + 6*a^2*b + 3*a*b^2 - b^3)
Dh10(a,b)=(-1/8) * (a + b) * (a + 2*b) *  (a^2 + 6*a*b + 4*b^2) * (a^2 + a*b - b^2)
Dh12(a,b)=(-1)* (a + b) * (a - b) * (a^2 + b^2) * (a^2 - 4*a*b + b^2) * (a^2 - a*b + b^2)
Dh22(a,b)=(-1)* (a - b) * (a + b) * (a^2 + b^2) * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2)
Dh24(a,b)=(-1)* (a - b) * (a + b) * (a^2 + b^2) * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2)
Dh26(a,b)=(-1)* (a + b) * (a - b) * (a^2 + b^2) * (a^2 - 4*a*b + b^2) * (a^2 - a*b + b^2)
Dh28(a,b)=(-1)* (a - b) * (a + b) * (a^2 + b^2) * (a^2 - 2*a*b - b^2) * (a^2 + 2*a*b - b^2)

# The quantities mu_T and nu_T appearing in the proof of Proposition 3.1. We use the following naming convention:
#If T=C_N (resp. C_2 x C_{2N}), then we write muN and nuN (resp. mu2N and nu2N)

mu1=R(-9539559001266306*a^34*b*r - 548948945459178615*a^33*b^2*r - 14519547418220443795*a^32*b^3*r - 234127759775202425824*a^31*b^4*r - 2575110917425636000752*a^30*b^5*r - 20491142880756574274543*a^29*b^6*r - 122200112945300864432069*a^28*b^7*r - 558789538610103330410604*a^27*b^8*r - 1990466920986675852283488*a^26*b^9*r - 5586203505112597623012489*a^25*b^10*r - 12449258858581607984805702*a^24*b^11*r - 22116403615461431115166512*a^23*b^12*r - 31253929843665621280855704*a^22*b^13*r - 34701215504093587856931732*a^21*b^14*r - 29294794033058352518887107*a^20*b^15*r - 17227726623579615174798384*a^19*b^16*r - 4918084245648484006480884*a^18*b^17*r + 2116017942607835766080613*a^17*b^18*r + 3178900369037263653877302*a^16*b^19*r + 1410610885703680983382980*a^15*b^20*r - 62544425186528944230486*a^14*b^21*r - 360999990322686670882611*a^13*b^22*r - 127160919199035603633690*a^12*b^23*r + 27261202563672206987928*a^11*b^24*r + 28037357732429879686932*a^10*b^25*r + 1363714853771191855032*a^9*b^26*r - 3400998849831983174883*a^8*b^27*r - 427575266666130927288*a^7*b^28*r + 304671256839247963494*a^6*b^29*r + 30475484514554578951*a^5*b^30*r - 21056815465868952407*a^4*b^31*r + 210977668250543040*a^3*b^32*r + 797666803043671412*a^2*b^33*r - 119402949755668075*a*b^34*r + 5559060566555523*b^35*r + 5559060566555523*a^35*s + 286410685816134857*a^34*b*s + 7471341492223002902*a^33*b^2*s + 122032950414153372438*a^32*b^3*s + 1378593292609432866904*a^31*b^4*s + 11376366537428643623521*a^30*b^5*s + 70917218812941000609828*a^29*b^6*s + 341377990917165496172472*a^28*b^7*s + 1288277597317064119624341*a^27*b^8*s + 3851885824834290979328649*a^26*b^9*s + 9190286245640352823010472*a^25*b^10*s + 17560412137751473322260428*a^24*b^11*s + 26835439279854588580274859*a^23*b^12*s + 32488367606117112278578272*a^22*b^13*s + 30387633291960667692779094*a^21*b^14*s + 20623871213737717395428388*a^20*b^15*s + 8264118432665120027186493*a^19*b^16*s - 523787250482861800010571*a^18*b^17*s - 3265688061228068228173122*a^17*b^18*s - 2039961111558188801655234*a^16*b^19*s - 273832999582468802539899*a^15*b^20*s + 373125931050079313565957*a^14*b^21*s + 214712934305617096881780*a^13*b^22*s - 1895211645560087315856*a^12*b^23*s - 38632314107111441076027*a^11*b^24*s - 7553991376394369787330*a^10*b^25*s + 4247464803719856546420*a^9*b^26*s + 1260762804125657854074*a^8*b^27*s - 393307592723569821746*a^7*b^28*s - 101180222183547279593*a^6*b^29*s + 33812974350851393856*a^5*b^30*s + 2262564531016958000*a^4*b^31*s - 1755924817777947166*a^3*b^32*s + 224603939416124211*a^2*b^33*s - 9539559001266306*a*b^34*s)
nu1=R((-1) * (9539559001266306*a^11*r - 2179364928902984901*a^10*b*r - 779241578294930771*a^9*b^2*r + 19349625753115254396*a^8*b^3*r + 68648309837584487946*a^7*b^4*r + 140035124940112783356*a^6*b^5*r + 198984445120861029963*a^5*b^6*r + 197499490687956186603*a^4*b^7*r + 129901492757843862951*a^3*b^8*r + 55181694759479387454*a^2*b^9*r + 13355741977624043571*a*b^10*r + 1214771586217657445*b^11*r + 981055123358524387*a^11*s + 1963082984440657326*a^10*b*s - 9211802722367214468*a^9*b^2*s - 45798810680169524829*a^8*b^3*s - 107743153086929916306*a^7*b^4*s - 172231959371980281795*a^6*b^5*s - 195331141587189186996*a^5*b^6*s - 150470452932821014122*a^4*b^7*s - 73282649078073629700*a^3*b^8*s - 21539083455804565069*a^2*b^9*s - 2284300077916914267*a*b^10*s - 9539559001266306*b^11*s))
mu2=R(40160*a^8*b*r - 162424*a^7*b^2*r + 87392*a^6*b^3*r + 157448*a^5*b^4*r - 8160*a^4*b^5*r + 162424*a^3*b^6*r - 88672*a^2*b^7*r - 157448*a*b^8*r - 32768*b^9*r - 32768*a^9*s + 157448*a^8*b*s - 88672*a^7*b^2*s - 162424*a^6*b^3*s - 8160*a^5*b^4*s - 157448*a^4*b^5*s + 87392*a^3*b^6*s + 162424*a^2*b^7*s + 40160*a*b^8*s)
nu2=R(-5020*a^7*r + 120703*a^6*b*r - 105744*a^5*b^2*r + 124733*a^4*b^3*r + 125740*a^3*b^4*r - 128035*a^2*b^5*r - 93408*a*b^6*r - 117985*b^7*r - 117985*a^7*s + 93408*a^6*b*s - 128035*a^5*b^2*s - 125740*a^4*b^3*s + 124733*a^3*b^4*s + 105744*a^2*b^5*s + 120703*a*b^6*s + 5020*b^7*s)
mu3=-1538*a^7*b*r - 5383*a^6*b^2*r - 11483*a^5*b^3*r - 15250*a^4*b^4*r - 14381*a^3*b^5*r - 9013*a^2*b^6*r - 3702*a*b^7*r - 729*b^8*r + 729*a^8*s + 3702*a^7*b*s + 9013*a^6*b^2*s + 14381*a^5*b^3*s + 15250*a^4*b^4*s + 11483*a^3*b^5*s + 5383*a^2*b^6*s + 1538*a*b^7*s
nu3=-1538*a^8*r + 14611*a^7*b*r - 21480*a^6*b^2*r - 105899*a^5*b^3*r + 101983*a^4*b^4*r + 414048*a^3*b^5*r + 317758*a^2*b^6*r + 93646*a*b^7*r + 16824*b^8*r - 2859*a^8*s - 6308*a^7*b*s + 74407*a^6*b^2*s + 25761*a^5*b^3*s - 309767*a^4*b^4*s - 415940*a^3*b^5*s - 166821*a^2*b^6*s - 26915*a*b^7*s - 1538*b^8*s
mu4=56*a^6*b*r - 174*a^5*b^2*r + 361*a^4*b^3*r - 442*a^3*b^4*r + 402*a^2*b^5*r - 218*a*b^6*r + 81*b^7*r + 81*a^7*s - 218*a^6*b*s + 402*a^5*b^2*s - 442*a^4*b^3*s + 361*a^3*b^4*s - 174*a^2*b^5*s + 56*a*b^6*s
nu4=56*a^7*r + 218*a^6*b*r + 207*a^5*b^2*r - 213*a^4*b^3*r - 477*a^3*b^4*r - 150*a^2*b^5*r + 172*a*b^6*r + 106*b^7*r + 106*a^7*s + 172*a^6*b*s - 150*a^5*b^2*s - 477*a^4*b^3*s - 213*a^3*b^4*s + 207*a^2*b^5*s + 218*a*b^6*s + 56*b^7*s
mu22=-259*a^7*r + 2072*a^6*b*r - 5171*a^5*b^2*r + 2000*a^4*b^3*r + 6915*a^3*b^4*r - 2152*a^2*b^5*r - 5389*a*b^6*r - 2048*b^7*r - 2048*a^7*s + 5389*a^6*b*s - 2152*a^5*b^2*s - 6915*a^4*b^3*s + 2000*a^3*b^4*s + 5171*a^2*b^5*s + 2072*a*b^6*s + 259*b^7*s
nu22=-4144*a^6*b*r - 4000*a^4*b^3*r + 4304*a^2*b^5*r + 4096*b^7*r + 4096*a^7*s + 4304*a^5*b^2*s - 4000*a^3*b^4*s - 4144*a*b^6*s


# The quantity u_T in the proof of Proposition 3.1. We use the following naming convention:
# If T=C_N (resp. C_2 x C_{2N}), then we write uN (resp. u2N)
u2=2
u3=(a^3-3*a^2*b-6*a*b^2-b^3)^2
u4=(a-b)*(a+b)^3
u5=1
u6=2
u7=1
u8=1
u9=1
u10=2
u12=1
u22=2
u24=1
u26=16
u28=1

# The quantity n_T defined in Lemma 4.1
# If T=C_N (resp. C_2 x C_{2N}), then we write nN (resp. n2N)
n1=36
n2=48
n3=36
n4=48
n6=48
n7=24
n8=48
n9=36
n10=36
n12=48
n22=48
n24=48
n26=48
n28=48

# The approximate value of the quantity theta_T defined in Lemma 4.2
# If T=C_N (resp. C_2 x C_{2N}), then we write thetaN (resp. theta2N)

theta1=4.41147
theta2=2.41421
theta3=4.41147
theta4=3.73205
theta5=0.67062
theta6=3.73205
theta7=6.2959
theta8=2.41421
theta9=4.41147
theta10=1.61803
theta12=3.73205
theta22=2.41421
theta24=2.41421
theta26=3.73205
theta28=2.41421

# The approximate value of the quantity delta_T defined in Lemma 4.3
# If T=C_N (resp. C_2 x C_{2N}), then we write deltaN (resp. delta2N)

delta3=43.4033
delta4=13.5934
delta6=43.3677
delta7=7.07956
delta8=2.48383
delta9=4.75552
delta10=3.06311
delta12=3.89418
delta22=1728.57
delta24=12.2907
delta26=6.00485
delta28=3.38169

# The quantities P,Q, and R appearing in the proof of Proposition 3.1 for T=C_5

P5(a,b) = (64*b^8 - 8*b^4 - 1)
Q5(a,b) = (4096*b^16 - 1024*b^12 + 256*b^8 - 24*b^4 + 1)
R5(a,b) = (4096*b^16 + 1536*b^12 + 256*b^8 + 16*b^4 + 1)



